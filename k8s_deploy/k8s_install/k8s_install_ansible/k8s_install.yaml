- hosts: all
  become: yes
  tasks:

    - name: Update APT packages
      apt:
        update_cache: yes

    - name: Reboot and wait for reboot to complete
      reboot:

    - name: Disable SWAP (Kubeadm requirement)
      shell: |
        swapoff -a

    - name: Disable SWAP in fstab (Kubeadm requirement)
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: Create an empty file for the Containerd module
      copy:
        content: ""
        dest: /etc/modules-load.d/containerd.conf
        force: no

    - name: Configure modules for Containerd
      blockinfile:
        path: /etc/modules-load.d/containerd.conf
        block: |
             overlay
             br_netfilter

    - name: Create an empty file for Kubernetes sysctl params
      copy:
        content: ""
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        force: no

    - name: Configure sysctl params for Kubernetes
      lineinfile:
        path: /etc/sysctl.d/99-kubernetes-cri.conf
        line: "{{ item }}"
      with_items:
        - 'net.bridge.bridge-nf-call-iptables  = 1'
        - 'net.ipv4.ip_forward                 = 1'
        - 'net.bridge.bridge-nf-call-ip6tables = 1'

    - name: Apply sysctl params without reboot
      command: sysctl --system

    - name: Install APT Transport HTTPS
      apt:
        name: apt-transport-https
        state: present

    - name: Add Docker apt-key
      get_url:
        url: https://download.docker.com/linux/debian/gpg
        dest: /etc/apt/keyrings/docker-apt-keyring.asc
        mode: '0644'
        force: true

    - name: Add Docker's APT repository
      apt_repository:
        repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }} signed-by=/etc/apt/keyrings/docker-apt-keyring.asc] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        state: present
        update_cache: yes

    - name: Add Kubernetes apt-key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
        mode: '0644'
        force: true

    - name: Add Kubernetes' APT repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
        state: present
        update_cache: yes

    - name: Install Containerd
      apt:
        name: containerd.io
        state: present

    - name: Create Containerd directory
      file:
        path: /etc/containerd
        state: directory

    - name: Add Containerd configuration
      shell: /usr/bin/containerd config default > /etc/containerd/config.toml

    - name: Configuring the systemd cgroup driver for Containerd
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '            SystemdCgroup = false'
        line: '            SystemdCgroup = true'

    - name: Enable the Containerd service and start it
      systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon-reload: yes

    - name: Install Kubelet
      apt:
        name: kubelet=1.28.*
        state: present
        update_cache: true

    - name: Install Kubeadm
      apt:
        name: kubeadm=1.28.*
        state: present

    - name: Enable the Kubelet service, and enable it persistently
      service:
        name: kubelet
        enabled: yes

    - name: Enable br_netfilter
      modprobe:
        name: br_netfilter
        state: present

    - name: Set bridge-nf-call-iptables
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: 1

    - name: Set ip_forward
      sysctl:
        name: net.ipv4.ip_forward
        value: 1

    - name: Reboot and wait for reboot to complete
      reboot:

- hosts: k8s_master
  become: true
  tasks:
    - name: Install Kubectl
      apt:
        name: kubectl=1.28.*
        state: present
        force: yes # allow downgrades

- hosts: k8s_master
  become: yes
  tasks:

    - name: Initialize Kubernetes master
      shell: kubeadm init --pod-network-cidr=10.244.0.0/16
      register: kubeadm_init

    - name: create .kube directory
      become: yes
      become_user: svetlinsem
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755

    - name: copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/svetlinsem/.kube/config
        remote_src: yes
        owner: svetlinsem

    - name: install Pod network
      become: yes
      become_user: svetlinsem
      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml >> pod_network_setup.log
      args:
        chdir: $HOME
        creates: pod_network_setup.log

    - name: Get join command
      shell: kubeadm token create --print-join-command
      register: join_command_raw

    - name: Set join command
      set_fact:
        join_command: "{{ join_command_raw.stdout_lines[0] }}"

- hosts: k8s_worker
  become: true
  tasks:

    - name: TCP port 6443 on master is reachable from worker
      wait_for: "host={{ hostvars['k8s_master']['ansible_default_ipv4']['address'] }} port=6443 timeout=1"

    - name: Join cluster
      shell: "{{ hostvars['k8s_master'].join_command }} >> node_joined.log"
      args:
        chdir: /home/svetlinsem
        creates: node_joined.log

- hosts: k8s_master
  become: yes
  tasks:

    - name: Install gpg
      ansible.builtin.apt:
         name: gpg
         state: present

    - name: Import Helm GPG signing key
      ansible.builtin.shell: |
        curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
      changed_when: false

    - name: Install apt-transport-https
      ansible.builtin.apt:
        name: apt-transport-https
        state: present

    - name: Ensure /etc/apt/sources.list.d/ directory exists
      ansible.builtin.file:
        path: /etc/apt/sources.list.d/
        state: directory

    - name: Ensure helm-stable-debian.list exists
      ansible.builtin.file:
        path: /etc/apt/sources.list.d/helm-stable-debian.list
        state: touch

    - name: Add Helm repository to apt sources
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/helm-stable-debian.list
        line: "deb [arch=amd64 signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main"

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true

    - name: Install Helm
      ansible.builtin.package:
        name: helm
        state: present

    - name: Install pip
      ansible.builtin.apt:
        name: pip
        state: present

    - name: Install dependency
      ansible.builtin.pip:
        name: kubernetes
        extra_args: "--break-system-packages"